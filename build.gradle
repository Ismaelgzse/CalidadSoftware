// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.1'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

plugins {
  id "org.sonarqube" version "2.8"
}

sonarqube {
  properties {
    property "sonar.projectKey", "Ismaelgzse_CalidadSoftware"
    property "sonar.organization", "grupo3calidad"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.login", "0532e937b3dd62a3735b4c59afc7601fd6ead5e4"
    property "sonar.branch.name", System.getenv('main')
  }
}

String branch

task gitBranch{
    descripcion ""
    branch= "main"
    def branch_proc= 'git rev-parse --abbrev-ref HEAD'.execute()
    branch_proc.in.eachLine {line -> branch = line}
    branch_proc.err.eachLine {line -> println line}
    branch_proc.waitFor()
}
task gitPull{
    description ""
    dependsOn "gitBranch"
    doLast{
        exec{
            if(project.hasProperty('branchName')){
                branch= branchName
            }
            commandLine "git", "pull","orgin",branch.toString()
        }
    }
}
task gitAdd{
    description ""
    doLast{
        exec{
            commandLine "git","add","*"
        }
    }
}

task gitCommit{
    description ""
    doLast{
        System.setProperty('java.awt.headless','false')
        new SwingBuilder().edt{
            dialog(modal:true, title: 'Enter commit message', alwaysOnTop:true,resizable:false, locationRelativeTo:null, pack:true, show:true){
                vbox{
                    label(text:"Please enter your commit message")
                    def imput1= textFiled()
                    button(defaultButton:true,text:'OK',actionPerformed:{
                        commitMessage=input1.text;
                        dispose();
                        exec{
                            commandLine "git", "commit", "-m", commitMessage
                        }
                    })
                }
            }
        }
    }
}
task gitPush{
    description ""
    dependsON "gitBranch"
    doLast{
        exec{
            commandLine "git","push","origin", branch.toString()
        }
    }
}
task gitCompletePush{
    description""
    dependsOn "gitAdd"
    dependsOn "gitCommit"
    dependsOn "gitPush"
    task.findByName("gitCommit").mustRunAfter "gitAdd"
    task.findByName("gitPush").mustRunAfter "gitCommit"
}
